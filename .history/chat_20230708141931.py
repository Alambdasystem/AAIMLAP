[{"import datetime\r":"import os\r"},{"import datetime\r":"from dotenv import load_dotenv\r"},{"import datetime\r":"import discord\r"},{"import datetime\r":"import pandas as pd\r"},{"import datetime\r":"from discord.ext import commands\r"},{"import datetime\r":"import openai\r"},{"import datetime\r":"import csv\r"},{"import datetime\r":"import asyncio\r"},{"import datetime\r":"import re\r"},{"import datetime\r":"from collections import defaultdict\r"},{"import datetime\r":"from pathlib import Path\r"},{"import datetime\r":"from transformers import AlbertForQuestionAnswering"},{"import datetime\r":"import torch\r"},{"import datetime\r":"\r"},{"import datetime\r":"\r"},{"import datetime\r":"\r"},{"import datetime\r":"\r"},{"import datetime\r":"\r"},{"import datetime\r":"# Load the environment variables from the .env file\r"},{"import datetime\r":"load_dotenv()\r"},{"import datetime\r":"print(\"Loaded environment variables.\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"# Getting the Discord Bot Token from environment variables\r"},{"import datetime\r":"TOKEN = os.environ.get('DISCORD_BOT_TOKEN')\r"},{"import datetime\r":"\r"},{"import datetime\r":"intents = discord.Intents.default()\r"},{"import datetime\r":"intents.messages = True\r"},{"import datetime\r":"intents.message_content = True\r"},{"import datetime\r":"\r"},{"import datetime\r":"bot = commands.Bot(command_prefix='!'"},{"import datetime\r":"\r"},{"import datetime\r":"model_name = 'albert-base-v2'  # Replace with the desired ALBERT model\r"},{"import datetime\r":"model = AlbertForQuestionAnswering.from_pretrained(model_name)\r"},{"import datetime\r":"tokenizer = AlbertTokenizer.from_pretrained(model_name)\r"},{"import datetime\r":"\r"},{"import datetime\r":"def create_empty_chat_history():\r"},{"import datetime\r":"    return pd.DataFrame(columns=['timestamp'"},{"import datetime\r":"\r"},{"import datetime\r":"#chat_histories = defaultdict(create_empty_chat_history)\r"},{"import datetime\r":"chat_histories = {}\r"},{"import datetime\r":"\r"},{"import datetime\r":"# Loading the chat history from the CSV file into the DataFrame\r"},{"import datetime\r":"chat_history = pd.read_csv('chat_history.csv'"},{"import datetime\r":"                           'timestamp'"},{"import datetime\r":"chat_history['timestamp'] = pd.to_datetime(\r"},{"import datetime\r":"    chat_history['timestamp']"},{"import datetime\r":"chat_history = chat_history.dropna()  # remove blank lines\r"},{"import datetime\r":"print(\"Loaded chat history from CSV.\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"recall_role_instructions = \"You are a helpful assistant that finds information in a conversation and answers user's questions about what has occurred or been said in this chat\"\r"},{"import datetime\r":"summarize_role_instructions = \"You are a helpful assistant that summarizes a conversation.\"\r"},{"import datetime\r":"\r"},{"import datetime\r":"def load_chat_history(channel_id):\r"},{"import datetime\r":"    csv_file = f'chat_history_{channel_id}.csv'\r"},{"import datetime\r":"    if Path(csv_file).exists():  # check if the file exists\r"},{"import datetime\r":"        # Load the chat history from the CSV file into the DataFrame\r"},{"import datetime\r":"        chat_history = pd.read_csv(csv_file"},{"import datetime\r":"        chat_history['timestamp'] = pd.to_datetime(chat_history['timestamp']"},{"import datetime\r":"        chat_history = chat_history.dropna()  # remove blank lines\r"},{"import datetime\r":"        print(f\"Loaded chat history for channel {channel_id} from CSV.\")\r"},{"import datetime\r":"    else:\r"},{"import datetime\r":"        chat_history = create_empty_chat_history()\r"},{"import datetime\r":"        print(f\"No existing chat history for channel {channel_id}. Created new chat history.\")\r"},{"import datetime\r":"    return chat_history\r"},{"import datetime\r":"\r"},{"import datetime\r":"async def answer_question(query"},{"import datetime\r":"    inputs = tokenizer.encode_plus(query"},{"import datetime\r":"    input_ids = inputs[\"input_ids\"].tolist()[0]\r"},{"import datetime\r":"\r"},{"import datetime\r":"    outputs = model(**inputs)\r"},{"import datetime\r":"    answer_start_scores = outputs.start_logits\r"},{"import datetime\r":"    answer_end_scores = outputs.end_logits\r"},{"import datetime\r":"\r"},{"import datetime\r":"    answer_start = torch.argmax(answer_start_scores)\r"},{"import datetime\r":"    answer_end = torch.argmax(answer_end_scores) + 1\r"},{"import datetime\r":"\r"},{"import datetime\r":"    answer = tokenizer.decode(input_ids[answer_start:answer_end]"},{"import datetime\r":"\r"},{"import datetime\r":"    return answer\r"},{"import datetime\r":"\r"},{"import datetime\r":"async def generate_summary(text"},{"import datetime\r":"    if query:\r"},{"import datetime\r":"        user_text = f\"Please provide a summary of the following conversation"},{"import datetime\r":"    else:\r"},{"import datetime\r":"        user_text = f\"Please provide a summary of the following conversation:\\n\\n{text}\"\r"},{"import datetime\r":"\r"},{"import datetime\r":"    inputs = tokenizer.encode_plus(user_text"},{"import datetime\r":"    input_ids = inputs[\"input_ids\"].tolist()[0]\r"},{"import datetime\r":"\r"},{"import datetime\r":"    outputs = model.generate(input_ids"},{"import datetime\r":"    summary = tokenizer.decode(outputs[0]"},{"import datetime\r":"\r"},{"import datetime\r":"    return summary\r"},{"import datetime\r":"\r"},{"import datetime\r":"async def answer_question(query"},{"import datetime\r":"    openai.api_key = os.environ.get(\"OPENAI_API_KEY\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"    def sync_request():\r"},{"import datetime\r":"        print(\"Generating OpenAI Request...\")\r"},{"import datetime\r":"        return openai.ChatCompletion.create(\r"},{"import datetime\r":"            model=\"gpt-3.5-turbo\""},{"import datetime\r":"            messages=[\r"},{"import datetime\r":"                {\"role\": \"system\""},{"import datetime\r":"                {\"role\": \"user\""},{"import datetime\r":"                    \"content\": f\"Please answer the question or tell me what we discussed regarding ( {query} ) within this conversation:\\n\\n{text}\"}\r"},{"import datetime\r":"            ]"},{"import datetime\r":"            max_tokens=150"},{"import datetime\r":"            n=1"},{"import datetime\r":"            temperature=0.7"},{"import datetime\r":"        )\r"},{"import datetime\r":"\r"},{"import datetime\r":"    loop = asyncio.get_event_loop()\r"},{"import datetime\r":"    print(\"Executing OpenAI Request...\")\r"},{"import datetime\r":"    response = await loop.run_in_executor(None"},{"import datetime\r":"    answer = response.choices[0].message['content'].strip()\r"},{"import datetime\r":"    print(f\"Answer: {answer}\")\r"},{"import datetime\r":"    return answer\r"},{"import datetime\r":"\r"},{"import datetime\r":"async def generate_summary(text"},{"import datetime\r":"    openai.api_key = os.environ.get(\"OPENAI_API_KEY\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"    if query:\r"},{"import datetime\r":"        user_text = f\"Please provide a summary of the following conversation"},{"import datetime\r":"    else:\r"},{"import datetime\r":"        user_text = f\"Please provide a summary of the following conversation:\\n\\n{text}\"\r"},{"import datetime\r":"\r"},{"import datetime\r":"    def sync_request():\r"},{"import datetime\r":"        print(\"Generating OpenAI Request for Summary...\")\r"},{"import datetime\r":"        return openai.ChatCompletion.create(\r"},{"import datetime\r":"            model=\"gpt-3.5-turbo\""},{"import datetime\r":"            messages=[\r"},{"import datetime\r":"                {\"role\": \"system\""},{"import datetime\r":"                {\"role\": \"user\""},{"import datetime\r":"            ]"},{"import datetime\r":"            max_tokens=150"},{"import datetime\r":"            n=1"},{"import datetime\r":"            temperature=0.7"},{"import datetime\r":"        )\r"},{"import datetime\r":"\r"},{"import datetime\r":"    loop = asyncio.get_event_loop()\r"},{"import datetime\r":"    print(\"Executing OpenAI Request for Summary...\")\r"},{"import datetime\r":"    response = await loop.run_in_executor(None"},{"import datetime\r":"    summary = response.choices[0].message['content'].strip()\r"},{"import datetime\r":"    print(f\"Summary: {summary}\")\r"},{"import datetime\r":"    return summary\r"},{"import datetime\r":"\r"},{"import datetime\r":"from flask import Flask\r"},{"import datetime\r":"app = Flask(__name__)\r"},{"import datetime\r":"\r"},{"import datetime\r":"@app.route('/')\r"},{"import datetime\r":"def dockerconfirm():\r"},{"import datetime\r":"    return 'Woohoo! Docker container is successfully running on this instance.'\r"},{"import datetime\r":"\r"},{"import datetime\r":"@bot.event\r"},{"import datetime\r":"async def on_ready():\r"},{"import datetime\r":"    print(f'{bot.user} has connected to Discord!')\r"},{"import datetime\r":"    print(f\"Current Chat History: {chat_history}\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"    if not os.path.isfile('chat_history.csv'):\r"},{"import datetime\r":"        with open('chat_history.csv'"},{"import datetime\r":"            csv_writer = csv.writer(f)\r"},{"import datetime\r":"            csv_writer.writerow(['timestamp'"},{"import datetime\r":"\r"},{"import datetime\r":"    for guild in bot.guilds:  # iterate over all servers the bot is connected to\r"},{"import datetime\r":"        for channel in guild.channels:  # iterate over all channels in the server\r"},{"import datetime\r":"            if isinstance(channel"},{"import datetime\r":"                # Load the chat history for the channel\r"},{"import datetime\r":"                chat_histories[channel.id] = load_chat_history(channel.id)\r"},{"import datetime\r":"    print(\"Loaded all chat histories.\")\r"},{"import datetime\r":"    \r"},{"import datetime\r":"@bot.event\r"},{"import datetime\r":"async def on_message(message):\r"},{"import datetime\r":"    global chat_histories\r"},{"import datetime\r":"\r"},{"import datetime\r":"    if message.author == bot.user:\r"},{"import datetime\r":"        return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    content = message.content\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Get the chat history for the current channel\r"},{"import datetime\r":"    chat_history = chat_histories[message.channel.id]\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # If the message is not a command\r"},{"import datetime\r":"    if not content.startswith('!'):\r"},{"import datetime\r":"        # Append the new message to the chat history DataFrame with the timestamp\r"},{"import datetime\r":"        chat_history.loc[len(chat_history)] = {\r"},{"import datetime\r":"            'timestamp': message.created_at"},{"import datetime\r":"\r"},{"import datetime\r":"        print(f\"Added message to chat history of channel {message.channel.id}\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"        # Append the new message to the CSV file\r"},{"import datetime\r":"        with open(f'chat_history_{message.channel.id}.csv'"},{"import datetime\r":"            csv_writer = csv.writer(f)\r"},{"import datetime\r":"            csv_writer.writerow(\r"},{"import datetime\r":"                [message.created_at"},{"import datetime\r":"\r"},{"import datetime\r":"        print(f\"Added message to CSV for channel {message.channel.id}\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"        # Update the chat_histories dictionary\r"},{"import datetime\r":"        chat_histories[message.channel.id] = chat_history\r"},{"import datetime\r":"\r"},{"import datetime\r":"    await bot.process_commands(message)\r"},{"import datetime\r":"\r"},{"import datetime\r":"@bot.command(name='recall')\r"},{"import datetime\r":"async def recall(ctx"},{"import datetime\r":"    query = ' '.join(args)\r"},{"import datetime\r":"    max_tokens = 3000\r"},{"import datetime\r":"\r"},{"import datetime\r":"    chat_history = chat_histories[ctx.channel.id]\r"},{"import datetime\r":"\r"},{"import datetime\r":"    relevant_history = chat_history[\r"},{"import datetime\r":"        ~(chat_history['author'] == bot.user.name) & \r"},{"import datetime\r":"        ~(chat_history['content'].str.startswith('!')) & \r"},{"import datetime\r":"        (chat_history['content'].str.contains('|'.join(args)"},{"import datetime\r":"    ].tail(10)\r"},{"import datetime\r":"    print(f\"relevant_history message{relevant_history}\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Estimate token count\r"},{"import datetime\r":"    estimated_tokens = relevant_history['content'].apply(lambda x: len(x.split()))\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Split messages into two parts if estimated token count exceeds the limit\r"},{"import datetime\r":"    if estimated_tokens.sum() > max_tokens:\r"},{"import datetime\r":"        # Find the index where the cumulative sum of tokens exceeds the limit\r"},{"import datetime\r":"        split_index = estimated_tokens.cumsum().searchsorted(max_tokens)[0]\r"},{"import datetime\r":"\r"},{"import datetime\r":"        # Split the messages\r"},{"import datetime\r":"        part1 = \"\\n\".join(\r"},{"import datetime\r":"            f\"{row.timestamp} - {row.author}: {row.content}\" for _"},{"import datetime\r":"        )\r"},{"import datetime\r":"        part2 = \"\\n\".join(\r"},{"import datetime\r":"            f\"{row.timestamp} - {row.author}: {row.content}\" for _"},{"import datetime\r":"        )\r"},{"import datetime\r":"\r"},{"import datetime\r":"        # Send two recall requests\r"},{"import datetime\r":"        summary1 = await answer_question(query"},{"import datetime\r":"        summary2 = await answer_question(query"},{"import datetime\r":"        summary = f\"Part 1: {summary1}\\nPart 2: {summary2}\"\r"},{"import datetime\r":"    else:\r"},{"import datetime\r":"        conversation_text = \"\\n\".join(\r"},{"import datetime\r":"            f\"{row.timestamp} - {row.author}: {row.content}\" for _"},{"import datetime\r":"        )\r"},{"import datetime\r":"\r"},{"import datetime\r":"        summary = await answer_question(query"},{"import datetime\r":"\r"},{"import datetime\r":"    await ctx.send(summary)\r"},{"import datetime\r":"\r"},{"import datetime\r":"\r"},{"import datetime\r":"@bot.command(name='summarize')\r"},{"import datetime\r":"async def summarize(ctx"},{"import datetime\r":"    query = ' '.join(args) if args else None\r"},{"import datetime\r":"\r"},{"import datetime\r":"    chat_history = chat_histories[ctx.channel.id]\r"},{"import datetime\r":"\r"},{"import datetime\r":"    relevant_history = chat_history[~(chat_history['author'] == bot.user.name) & ~(\r"},{"import datetime\r":"        chat_history['content'].str.startswith('!'))]\r"},{"import datetime\r":"\r"},{"import datetime\r":"    conversation_text = \"\\n\".join(\r"},{"import datetime\r":"        f\"{row.timestamp} - {row.author}: {row.content}\" for _"},{"import datetime\r":"\r"},{"import datetime\r":"    summary = await generate_summary(conversation_text"},{"import datetime\r":"    await ctx.send(summary)\r"},{"import datetime\r":"   \r"},{"import datetime\r":"    \r"},{"import datetime\r":"# Testing\r"},{"import datetime\r":"@bot.command(name='test')\r"},{"import datetime\r":"async def test_command(ctx"},{"import datetime\r":"    print(\"Test command invoked.\")\r"},{"import datetime\r":"    \r"},{"import datetime\r":"    # Process the test command arguments\r"},{"import datetime\r":"    if len(args) == 0:\r"},{"import datetime\r":"        await ctx.send(\"Please provide test arguments.\")\r"},{"import datetime\r":"        return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Perform the desired test actions\r"},{"import datetime\r":"    # ...\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Send the test results or output\r"},{"import datetime\r":"    # ...\r"},{"import datetime\r":"    \r"},{"import datetime\r":"    print(\"Test command executed.\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"\r"},{"import datetime\r":"\r"},{"import datetime\r":"# Add Task\r"},{"import datetime\r":"task_list = []  # Declare an empty task list\r"},{"import datetime\r":"\r"},{"import datetime\r":"@bot.command(name='addtask')\r"},{"import datetime\r":"async def add_task(ctx):\r"},{"import datetime\r":"    if any(task['description'] == 'Please provide a task description.' for task in task_list):\r"},{"import datetime\r":"        # A task creation is already in progress for this user and channel\r"},{"import datetime\r":"        await ctx.send(\"A task creation is already in progress.\")\r"},{"import datetime\r":"        return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Ask for the task description\r"},{"import datetime\r":"    await ctx.send(\"Please provide a task description.\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"    def check(message):\r"},{"import datetime\r":"        return message.author == ctx.author and message.channel == ctx.channel\r"},{"import datetime\r":"\r"},{"import datetime\r":"    try:\r"},{"import datetime\r":"        # Wait for the user's response\r"},{"import datetime\r":"        description_message = await bot.wait_for('message'"},{"import datetime\r":"\r"},{"import datetime\r":"        # Get the task description from the user's response\r"},{"import datetime\r":"        task_description = description_message.content\r"},{"import datetime\r":"\r"},{"import datetime\r":"        # Ask for the assignee\r"},{"import datetime\r":"        await ctx.send(\"Please provide the assignee for the task.\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"        # Wait for the user's response\r"},{"import datetime\r":"        assignee_message = await bot.wait_for('message'"},{"import datetime\r":"\r"},{"import datetime\r":"        # Get the assignee from the user's response\r"},{"import datetime\r":"        assignee = assignee_message.content\r"},{"import datetime\r":"\r"},{"import datetime\r":"        # Ask for the deadline\r"},{"import datetime\r":"        await ctx.send(\"Please provide the deadline for the task.\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"        # Wait for the user's response\r"},{"import datetime\r":"        deadline_message = await bot.wait_for('message'"},{"import datetime\r":"\r"},{"import datetime\r":"        # Get the deadline from the user's response\r"},{"import datetime\r":"        deadline = deadline_message.content\r"},{"import datetime\r":"\r"},{"import datetime\r":"        # Create a new task with the provided details and the user who created it\r"},{"import datetime\r":"        task = {\r"},{"import datetime\r":"            'description': task_description"},{"import datetime\r":"            'assignee': assignee"},{"import datetime\r":"            'deadline': deadline"},{"import datetime\r":"            'status': 'In Progress'"},{"import datetime\r":"            'created_by': ctx.author.name  # Add the created_by field\r"},{"import datetime\r":"        }\r"},{"import datetime\r":"\r"},{"import datetime\r":"        # Add the task to the task list\r"},{"import datetime\r":"        task_list.append(task)\r"},{"import datetime\r":"\r"},{"import datetime\r":"        await ctx.send(\"Task added successfully.\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"    except asyncio.TimeoutError:\r"},{"import datetime\r":"        await ctx.send(\"You took too long to respond. Task creation canceled.\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"\r"},{"import datetime\r":"#viewtask    \r"},{"import datetime\r":"@bot.command(name='viewtask')\r"},{"import datetime\r":"async def view_task(ctx):\r"},{"import datetime\r":"    if not task_list:\r"},{"import datetime\r":"        await ctx.send(\"The task list is empty.\")\r"},{"import datetime\r":"    else:\r"},{"import datetime\r":"        for index"},{"import datetime\r":"            # Display the task information\r"},{"import datetime\r":"            task_info = f\"Task {index}:\\n\" \\\r"},{"import datetime\r":"                        f\"Description: {task['description']}\\n\" \\\r"},{"import datetime\r":"                        f\"Assignee: {task['assignee']}\\n\" \\\r"},{"import datetime\r":"                        f\"Deadline: {task['deadline']}\\n\" \\\r"},{"import datetime\r":"                        f\"Status: {task['status']}\\n\"\r"},{"import datetime\r":"\r"},{"import datetime\r":"            await ctx.send(task_info)\r"},{"import datetime\r":"\r"},{"import datetime\r":"            \r"},{"import datetime\r":"# @bot.command(name='updatetask')\r"},{"import datetime\r":"# async def update_task(ctx"},{"import datetime\r":"#     # Find the task in the task list with a matching description\r"},{"import datetime\r":"#     found_tasks = [task for task in task_list if task['description'].lower() == task_description.lower()]\r"},{"import datetime\r":"\r"},{"import datetime\r":"#     # If no matching tasks are found"},{"import datetime\r":"#     if not found_tasks:\r"},{"import datetime\r":"#         await ctx.send(\"Task not found.\")\r"},{"import datetime\r":"#     else:\r"},{"import datetime\r":"#         # Get the first found task (assuming there's only one)\r"},{"import datetime\r":"#         task = found_tasks[0]\r"},{"import datetime\r":"\r"},{"import datetime\r":"#         # Ask for the assignee\r"},{"import datetime\r":"#         await ctx.send(\"Please provide the new assignee for the task.\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"#         def check_assignee(message):\r"},{"import datetime\r":"#             return message.author == ctx.author and message.channel == ctx.channel\r"},{"import datetime\r":"\r"},{"import datetime\r":"#         assignee_message = await bot.wait_for('message'"},{"import datetime\r":"#         new_assignee = assignee_message.content\r"},{"import datetime\r":"\r"},{"import datetime\r":"#         # Ask for the deadline\r"},{"import datetime\r":"#         await ctx.send(\"Please provide the new deadline for the task.\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"#         def check_deadline(message):\r"},{"import datetime\r":"#             return message.author == ctx.author and message.channel == ctx.channel\r"},{"import datetime\r":"\r"},{"import datetime\r":"#         deadline_message = await bot.wait_for('message'"},{"import datetime\r":"#         new_deadline = deadline_message.content\r"},{"import datetime\r":"\r"},{"import datetime\r":"#         # Ask for additional project information\r"},{"import datetime\r":"#         await ctx.send(\"Please provide any additional project information.\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"#         def check_info(message):\r"},{"import datetime\r":"#             return message.author == ctx.author and message.channel == ctx.channel\r"},{"import datetime\r":"\r"},{"import datetime\r":"#         info_message = await bot.wait_for('message'"},{"import datetime\r":"#         additional_info = info_message.content\r"},{"import datetime\r":"\r"},{"import datetime\r":"#         # Update the task description with additional information\r"},{"import datetime\r":"#         task['description'] += f\"\\nAssignee: {new_assignee}\\nDeadline: {new_deadline}\\nAdditional Info: {additional_info}\"\r"},{"import datetime\r":"\r"},{"import datetime\r":"#         await ctx.send(f\"Task '{task_description}' has been updated with the new information.\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"\r"},{"import datetime\r":"\r"},{"import datetime\r":"    \r"},{"import datetime\r":"#@bot.command(name='removetask')\r"},{"import datetime\r":"#async def remove_task(ctx"},{"import datetime\r":"    # Check if the project name is provided\r"},{"import datetime\r":"    #if not project_name:\r"},{"import datetime\r":"        #await ctx.send(\"Please provide a project name.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Check if the task ID is provided\r"},{"import datetime\r":"    #if not task_id:\r"},{"import datetime\r":"        #await ctx.send(\"Please provide a task ID.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Check if the project exists\r"},{"import datetime\r":"    #if project_name not in projects:\r"},{"import datetime\r":"        #await ctx.send(\"Project not found.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Remove the task from the project\r"},{"import datetime\r":"    # ...\r"},{"import datetime\r":"\r"},{"import datetime\r":"    #await ctx.send(f\"Task {task_id} removed successfully from project '{project_name}'.\")\r"},{"import datetime\r":"    \r"},{"import datetime\r":"#@bot.command(name='completetask')\r"},{"import datetime\r":"#async def complete_task(ctx"},{"import datetime\r":"    # Check if the project name is provided\r"},{"import datetime\r":"    #if not project_name:\r"},{"import datetime\r":"        #await ctx.send(\"Please provide a project name.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Check if the task ID is provided\r"},{"import datetime\r":"    #if not task_id:\r"},{"import datetime\r":"        #await ctx.send(\"Please provide a task ID.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Check if the project exists\r"},{"import datetime\r":"    #if project_name not in projects:\r"},{"import datetime\r":"        #await ctx.send(\"Project not found.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Mark the task as completed\r"},{"import datetime\r":"    # ...\r"},{"import datetime\r":"\r"},{"import datetime\r":"    #await ctx.send(f\"Task {task_id} marked as completed in project '{project_name}'.\")\r"},{"import datetime\r":"    \r"},{"import datetime\r":"#@bot.command(name='assigntask')\r"},{"import datetime\r":"#async def assign_task(ctx"},{"import datetime\r":"    # Check if the project name is provided\r"},{"import datetime\r":"    #if not project_name:\r"},{"import datetime\r":"        #await ctx.send(\"Please provide a project name.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Check if the task ID is provided\r"},{"import datetime\r":"    #if not task_id:\r"},{"import datetime\r":"        #await ctx.send(\"Please provide a task ID.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Check if the new assignee is provided\r"},{"import datetime\r":"    #if not new_assignee:\r"},{"import datetime\r":"        #await ctx.send(\"Please provide a new assignee for the task.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Check if the project exists\r"},{"import datetime\r":"    #if project_name not in projects:\r"},{"import datetime\r":"        #await ctx.send(\"Project not found.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Change the assignee of the task\r"},{"import datetime\r":"    # ...\r"},{"import datetime\r":"\r"},{"import datetime\r":"    #await ctx.send(f\"Assignee of task {task_id} updated in project '{project_name}'.\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"\r"},{"import datetime\r":"#@bot.command(name='changetaskdeadline')\r"},{"import datetime\r":"#async def change_task_deadline(ctx"},{"import datetime\r":"    # Check if the project name is provided\r"},{"import datetime\r":"    #if not project_name:\r"},{"import datetime\r":"        #await ctx.send(\"Please provide a project name.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Check if the task ID is provided\r"},{"import datetime\r":"    #if not task_id:\r"},{"import datetime\r":"        #await ctx.send(\"Please provide a task ID.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Check if the new deadline is provided\r"},{"import datetime\r":"    #if not new_deadline:\r"},{"import datetime\r":"        #await ctx.send(\"Please provide a new deadline for the task.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Check if the project exists\r"},{"import datetime\r":"    #if project_name not in projects:\r"},{"import datetime\r":"        #await ctx.send(\"Project not found.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Change the deadline of the task\r"},{"import datetime\r":"    # ...\r"},{"import datetime\r":"\r"},{"import datetime\r":"    #await ctx.send(f\"Deadline of task {task_id} updated in project '{project_name}'.\")\r"},{"import datetime\r":"    \r"},{"import datetime\r":"# @bot.command(name='viewarchives')\r"},{"import datetime\r":"# async def view_archives(ctx):\r"},{"import datetime\r":"#     # Retrieve a list of archived projects from your data storage\r"},{"import datetime\r":"#     archived_projects = retrieve_archived_projects()\r"},{"import datetime\r":"\r"},{"import datetime\r":"#     if not archived_projects:\r"},{"import datetime\r":"#         await ctx.send(\"There are no archived projects.\")\r"},{"import datetime\r":"#         return\r"},{"import datetime\r":"\r"},{"import datetime\r":"#     # Generate a formatted message with the archived projects\r"},{"import datetime\r":"#     message = \"Archived Projects:\\n\"\r"},{"import datetime\r":"#     for project_name in archived_projects:\r"},{"import datetime\r":"#         message += f\"- {project_name}\\n\"\r"},{"import datetime\r":"\r"},{"import datetime\r":"#     # Send the formatted message to the channel\r"},{"import datetime\r":"#     await ctx.send(message)\r"},{"import datetime\r":"\r"},{"import datetime\r":"\r"},{"import datetime\r":"#@bot.command(name='restoreproject')\r"},{"import datetime\r":"#async def restore_project(ctx"},{"import datetime\r":"    # Check if the project name is provided\r"},{"import datetime\r":"    #if not project_name:\r"},{"import datetime\r":"        #await ctx.send(\"Please provide a project name.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Check if the project exists in the archived projects\r"},{"import datetime\r":"    #if project_name not in archived_projects:\r"},{"import datetime\r":"        #await ctx.send(\"Project not found in archived projects.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Restore the project by moving it from archived to active projects\r"},{"import datetime\r":"    #project = archived_projects[project_name]\r"},{"import datetime\r":"    #active_projects[project_name] = project\r"},{"import datetime\r":"    #del archived_projects[project_name]\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Send a confirmation message\r"},{"import datetime\r":"    #await ctx.send(f\"Project '{project_name}' has been restored.\")\r"},{"import datetime\r":"    \r"},{"import datetime\r":"    \r"},{"import datetime\r":"#@bot.command(name='setpriority')\r"},{"import datetime\r":"#async def set_priority(ctx"},{"import datetime\r":"    # Check if the project name is provided\r"},{"import datetime\r":"    #if not project_name:\r"},{"import datetime\r":"        #await ctx.send(\"Please provide a project name.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Check if the task ID is provided\r"},{"import datetime\r":"    #if not task_id:\r"},{"import datetime\r":"        #await ctx.send(\"Please provide a task ID.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Check if the priority level is provided\r"},{"import datetime\r":"    #if not priority_level:\r"},{"import datetime\r":"        #await ctx.send(\"Please provide a priority level.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Check if the project exists\r"},{"import datetime\r":"    #if project_name not in projects:\r"},{"import datetime\r":"        #await ctx.send(\"Project not found.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Get the project from the projects list or database\r"},{"import datetime\r":"    #project = projects[project_name]\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Find the task in the project's task list based on the task ID\r"},{"import datetime\r":"    #task = None\r"},{"import datetime\r":"    #for t in project['tasks']:\r"},{"import datetime\r":"        #if t['task_id'] == task_id:\r"},{"import datetime\r":"            #task = t\r"},{"import datetime\r":"            #break\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Check if the task exists\r"},{"import datetime\r":"    #if not task:\r"},{"import datetime\r":"        #await ctx.send(\"Task not found.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Set the priority level of the task\r"},{"import datetime\r":"    #task['priority'] = priority_level\r"},{"import datetime\r":"\r"},{"import datetime\r":"    #await ctx.send(f\"Priority level of Task {task_id} in Project {project_name} set to {priority_level}.\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"#@bot.command(name='viewteam')\r"},{"import datetime\r":"#async def view_team(ctx):\r"},{"import datetime\r":"    # Implementation to display information about the project management team members\r"},{"import datetime\r":"    # ...\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Retrieve the team members from your data storage\r"},{"import datetime\r":"    # team_members = retrieve_team_members()\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Generate a formatted message with the team members' information\r"},{"import datetime\r":"    # message = \"Project Management Team Members:\\n\"\r"},{"import datetime\r":"    # for member in team_members:\r"},{"import datetime\r":"    #     member_name = member['name']\r"},{"import datetime\r":"    #     member_role = member['role']\r"},{"import datetime\r":"    #     message += f\"- {member_name} ({member_role})\\n\"\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Send the formatted message to the channel\r"},{"import datetime\r":"    # await ctx.send(message)\r"},{"import datetime\r":"    \r"},{"import datetime\r":"    \r"},{"import datetime\r":"#@bot.command(name='assignrole')\r"},{"import datetime\r":"#async def assign_role(ctx"},{"import datetime\r":"    # Check if the user is a member of the project management team\r"},{"import datetime\r":"    #if not is_team_member(user):\r"},{"import datetime\r":"        #await ctx.send(f\"{user} is not a member of the project management team.\")\r"},{"import datetime\r":"        #return\r"},{"import datetime\r":"\r"},{"import datetime\r":"    # Assign the specified role to the user\r"},{"import datetime\r":"    #if assign_role_to_user(user"},{"import datetime\r":"        #await ctx.send(f\"Role '{role}' assigned to {user} successfully.\")\r"},{"import datetime\r":"    #else:\r"},{"import datetime\r":"        #await ctx.send(\"Failed to assign role. Please check the provided role and try again.\")\r"},{"import datetime\r":"\r"},{"import datetime\r":"\r"},{"import datetime\r":"bot.run(TOKEN)\r\n"}]